---
export interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Modern portfolio of a Software Developer" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/png" href="/favicon.png" />
    <title>{title}</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Orbitron:wght@400;700;900&display=swap" rel="stylesheet">
    
    <style>
      /* Space-themed animations */
      @keyframes float {
        0%, 100% { transform: translateY(0px); }
        50% { transform: translateY(-20px); }
      }
      
      @keyframes float-intro {
        0% { 
          opacity: 0;
          transform: translateY(50px) rotate(-45deg); 
        }
        50% { 
          opacity: 0.7;
          transform: translateY(-10px) rotate(0deg); 
        }
        100% { 
          opacity: 1;
          transform: translateY(0px) rotate(0deg); 
        }
      }
      
      @keyframes float-gentle {
        0%, 100% { transform: translateY(0px); }
        50% { transform: translateY(-10px); }
      }
      
      @keyframes slide-up {
        from { 
          opacity: 0; 
          transform: translateY(50px); 
        }
        to { 
          opacity: 1; 
          transform: translateY(0); 
        }
      }
      
      @keyframes fade-in {
        from { opacity: 0; transform: translateY(30px); }
        to { opacity: 1; transform: translateY(0); }
      }
      
      @keyframes glow {
        0%, 100% { box-shadow: 0 0 20px rgba(34, 211, 238, 0.5); }
        50% { box-shadow: 0 0 40px rgba(34, 211, 238, 0.8); }
      }
      
      @keyframes twinkle {
        0%, 100% { opacity: 0.3; transform: scale(1); }
        50% { opacity: 1; transform: scale(1.2); }
      }
      
      .animate-float { 
        animation: float-gentle 6s ease-in-out infinite; 
      }
      .animate-float-intro { animation: float-intro 2s ease-out forwards; }
      .animate-slide-up { animation: slide-up 1s ease-out; }
      .animate-fade-in { animation: fade-in 0.8s ease-out forwards; }
      .animate-glow { animation: glow 2s ease-in-out infinite; }
      .animate-twinkle { animation: twinkle 3s ease-in-out infinite; }
      
      /* Custom scrollbar */
      ::-webkit-scrollbar {
        width: 8px;
      }
      ::-webkit-scrollbar-track {
        background: #1a1a2e;
      }
      ::-webkit-scrollbar-thumb {
        background: linear-gradient(to bottom, #22d3ee, #3b82f6);
        border-radius: 4px;
      }
      ::-webkit-scrollbar-thumb:hover {
        background: linear-gradient(to bottom, #06b6d4, #2563eb);
      }
      
      /* Cosmic background texture */
      body {
        background-image: 
          radial-gradient(2px 2px at 20px 30px, rgba(34, 211, 238, 0.3), transparent),
          radial-gradient(1px 1px at 40px 70px, rgba(59, 130, 246, 0.3), transparent),
          radial-gradient(1px 1px at 90px 40px, rgba(34, 211, 238, 0.2), transparent),
          radial-gradient(2px 2px at 130px 80px, rgba(59, 130, 246, 0.2), transparent);
        background-size: 200px 200px;
        animation: float-gentle 20s ease-in-out infinite;
      }
    </style>
  </head>
  <body class="font-sans bg-gradient-to-br from-gray-900 via-blue-900 to-black text-white">
    <slot />
    
    <script>
      // Smooth scrolling for anchor links
      document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
          e.preventDefault();
          const target = document.querySelector(this.getAttribute('href'));
          if (target) {
            target.scrollIntoView({
              behavior: 'smooth',
              block: 'start'
            });
          }
        });
      });

      // Add scroll animations
      const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
      };

      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            entry.target.classList.add('animate-fade-in');
          }
        });
      }, observerOptions);

      document.querySelectorAll('section').forEach(section => {
        observer.observe(section);
      });
      
      // Add twinkling stars effect
      function createStar() {
        const star = document.createElement('div');
        star.className = 'fixed w-1 h-1 bg-white rounded-full animate-twinkle pointer-events-none';
        star.style.left = Math.random() * window.innerWidth + 'px';
        star.style.top = Math.random() * window.innerHeight + 'px';
        star.style.animationDelay = Math.random() * 3 + 's';
        document.body.appendChild(star);
        
        setTimeout(() => {
          star.remove();
        }, 10000);
      }
      
      // Create stars periodically
      setInterval(createStar, 2000);
      
      // Create initial stars
      for (let i = 0; i < 20; i++) {
        setTimeout(createStar, i * 100);
      }
    </script>
  </body>
</html>